name: CI - 테스트 자동 실행

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend 테스트
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 의존성 캐싱
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 의존성 설치
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: 코드 품질 검사 (flake8)
      run: |
        pip install flake8
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Backend 테스트 실행
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./backend/coverage.xml
        directory: ./backend/htmlcov/
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend 테스트
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 의존성 캐싱
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-frontend-${{ hashFiles('frontend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-frontend-

    - name: 의존성 설치
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Frontend 테스트 실행
      run: |
        cd frontend
        python -m pytest . -v --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true  # Frontend 테스트가 아직 없을 수 있음

  integration-test:
    name: 통합 테스트
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Backend 의존성 설치
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Frontend 의존성 설치
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Backend 서버 시작
      run: |
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}

    - name: API 헬스 체크
      run: |
        curl -f http://localhost:8000/health || exit 1

    - name: 통합 테스트 실행
      run: |
        # 통합 테스트 스크립트 실행
        echo "통합 테스트 실행 중..."
        # 실제 통합 테스트는 향후 구현 